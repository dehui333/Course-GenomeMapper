name: CMake



on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  build:
    strategy:
      matrix:
        os: [macos-11, windows-2019, ubuntu-20.04]
        #removed windows due to problem with zlib(bug with cmake?)
        compiler: [g++, g++-4.8, clang++, clang++-4.0]
  
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    
    - if: ${{ matrix.compiler == 'g++-4.8' }}
      name: Setup GCC
      uses: egor-tensin/setup-gcc@v1
      with:
        version: "4.8"
        platform: x64

    - if: ${{ matrix.compiler == 'clang++-4.0' }}
      name: Setup Clang
      uses: egor-tensin/setup-clang@v1
      with:
        version: "4.0"
        platform: x64

    - name: Configure CMake
      working-directory: ${{github.workspace}}/build/
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -D CMAKE_CXX_COMPILER=/usr/bin/${{matrix.compiler}}  ${{github.workspace}}/ 

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build 

    - name: Test
      working-directory: ${{github.workspace}}/build/test
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C 
      
